<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<context:annotation-config />
	<tx:annotation-driven/>

	<!-- Service -->
	<bean class="org.ihtsdo.buildcloud.service.BuildServiceImpl"/>


	<!-- DAO -->
	<bean class="org.ihtsdo.buildcloud.dao.BuildDAOImpl">
		<property name="buildBucketName" ref="buildBucketName"/>
	</bean>


	<!-- Messaging -->
	<bean id="connectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
		<constructor-arg value="tcp://localhost:61616" />
	</bean>

	<bean class="org.springframework.jms.listener.DefaultMessageListenerContainer" >
		<property name="connectionFactory" ref="connectionFactory"/>
		<property name="destinationName">
			<util:constant static-field="org.ihtsdo.telemetry.core.Constants.QUEUE_RELEASE_EVENTS"/>
		</property>
		<property name="messageListener">
			<bean class="org.ihtsdo.buildcloud.worker.MessageConsumer"/>
		</property>
	</bean>


	<!-- S3 -->
	<bean id="s3Client" factory-bean="s3ClientFactory" factory-method="getClient">
		<constructor-arg value="${offlineMode}" />
	</bean>

	<bean class="org.ihtsdo.buildcloud.dao.s3.S3ClientFactory" name="s3ClientFactory">
		<property name="onlineImplementation">
			<bean class="org.ihtsdo.buildcloud.dao.s3.S3ClientImpl">
				<constructor-arg>
					<bean class="com.amazonaws.auth.BasicAWSCredentials">
						<constructor-arg value="${aws.key}" />
						<constructor-arg value="${aws.privateKey}" />
					</bean>
				</constructor-arg>
			</bean>
		</property>
		<property name="offlineImplementation">
			<bean class="org.ihtsdo.buildcloud.dao.s3.OfflineS3ClientImpl">
				<constructor-arg value="${s3.offline.directory}"/>
			</bean>
		</property>
	</bean>


	<!-- Properties -->
	<!-- Bean to resolve the 'data-service-properties-path' from a system property -->
	<bean id="configurer1" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
		<property name="placeholderPrefix" value="+{"/>
		<property name="properties">
			<props>
				<!-- Default path to override properties file -->
				<prop key="dataServicePropertiesPath">classpath:data-service.properties</prop>
			</props>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true"/>
	</bean>

	<bean id="configurer2" class="org.ihtsdo.context.OrderedPropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!-- Default properties file -->
				<value>classpath:data-service-defaults.properties</value>
				<!-- Override properties file -->
				<value>+{dataServicePropertiesPath}</value>
			</list>
		</property>
		<property name="ignoreResourceNotFound" value="true"/>
		<property name="properties">
			<props>
				<prop key="localRvf">false</prop>
				<!-- New temp directory will be used if property not set -->
				<prop key="s3.offline.directory"></prop>
			</props>
		</property>
	</bean>

	<bean class="java.lang.String" id="buildBucketName">
		<constructor-arg value="${buildBucketName}" />
	</bean>

	<bean class="java.lang.String" id="publishedBucketName">
		<constructor-arg value="${publishedBucketName}" />
	</bean>

</beans>
